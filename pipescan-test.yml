# Para testar, recomendo a utilização do projeto NodeGoat
# Disponivel em: https://github.com/IGDEXE/NodeGoat

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  veracodeAppProfile: "Github Actions - M3Corp-Community/NodeGoat"
  caminhoPacote: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

steps:
- task: CmdLine@2
  inputs:
    script: |
      zip -r $(caminhoPacote) . -i '*.py' '*.html' '*.htm' '*.asp' '*.cjs' '*.css' '*.ehtml' '*.es' '*.es6' '*.handlebars' '*.hbs' '*.hjs' '*.js' '*.jsx' '*.json' '*.jsp' '*.map' '*.mjs' '*.mustache' '*.ts' '*.tsx' '*.vue' '*.xhtml' '*.lock' '*.module' '*.inc' '*.html' '*.htm' '*.profile' '*.install' '*.engine' '*.theme' '*.php4' '*.php5' '*.php7' '*.phtml' '*.txt' -x "node_modules/*" ".gitignore"
  displayName: 'Criando pacote para analise'

- task: CmdLine@2
  inputs:
    script: |
      ls
      cd $(Build.SourcesDirectory)/scripts
      ls
  displayName: 'DEBUG'

- script: pip install veracode-api-signing
  displayName: 'Instalar Veracode API Signing'

- script: |
    curl -O -L https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
  displayName: 'Download Pipeline Scanner'
- task: ExtractFiles@1
  inputs:
    archiveFilePatterns: 'pipeline-scan-LATEST.zip'
    destinationFolder: '$(Build.ArtifactStagingDirectory)'
    cleanDestinationFolder: false
- script: |
      java -jar $(Build.ArtifactStagingDirectory)/pipeline-scan.jar -vid $(VeracodeID) -vkey $(VeracodeKey) --file '$(caminhoPacote)' --issue_details true || true
  displayName: 'Veracode PipelineScan'
  continueOnError: true

- task: PowerShell@2
  displayName: 'Veracode Resultados'
  inputs:
    targetType: 'inline'
    pwsh: true 
    script: |
      # Configura a autenticacao
      export VERACODE_API_KEY_ID=$(VeracodeID)
      export VERACODE_API_KEY_SECRET=$(VeracodeKey)

      # Importar o módulo
      $moduloPath = "$(Build.SourcesDirectory)/scripts/mitigationBaseline.psm1"
      Import-Module $moduloPath -Force

      $appProfiles = Get-VeracodeAllApps
      $appGUID = Get-VeracodeAppGUID "$(veracodeAppProfile)" $appProfiles
      $appFindings = Get-VeracodeAppFindings $appGUID
      $appMitigatedFlaws = Get-VeracodeAppMitigatedFlaws $appFindings
      $pipelineResults = Get-Content "filtered_results.json" | ConvertFrom-Json
      $filterResults = Clear-VeracodeMitigatedFlaws $appMitigatedFlaws $pipelineResults
      Show-VeracodeFlaws $filterResults
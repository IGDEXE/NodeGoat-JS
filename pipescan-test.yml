# Para testar, recomendo a utilização do projeto NodeGoat
# Disponivel em: https://github.com/IGDEXE/NodeGoat

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  veracodeAppProfile: "Github Actions - M3Corp-Community/NodeGoat"
  caminhoPacote: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip

steps:
- task: CmdLine@2
  inputs:
    script: |
      zip -r $(caminhoPacote) . -i '*.py' '*.html' '*.htm' '*.asp' '*.cjs' '*.css' '*.ehtml' '*.es' '*.es6' '*.handlebars' '*.hbs' '*.hjs' '*.js' '*.jsx' '*.json' '*.jsp' '*.map' '*.mjs' '*.mustache' '*.ts' '*.tsx' '*.vue' '*.xhtml' '*.lock' '*.module' '*.inc' '*.html' '*.htm' '*.profile' '*.install' '*.engine' '*.theme' '*.php4' '*.php5' '*.php7' '*.phtml' '*.txt' -x "node_modules/*" ".gitignore"
  displayName: 'Criando pacote para analise'

- task: CmdLine@2
  inputs:
    script: |
      ls
      cd $(Build.SourcesDirectory)/scripts
      ls
  displayName: 'DEBUG'

- script: pip install veracode-api-signing
  displayName: 'Instalar Veracode API Signing'

- task: PowerShell@2
  displayName: 'Veracode Resultados'
  inputs:
    targetType: 'inline'
    pwsh: true 
    script: |
      # Configura a autenticacao
      $env:VERACODE_API_KEY_ID = "$(VeracodeID)"
      $env:VERACODE_API_KEY_SECRET = "$(VeracodeKey)"

      $apiReturn = http --auth-type=veracode_hmac GET "https://api.veracode.com/appsec/v1/applications/?page=0&size=500" | ConvertFrom-Json
      $pages = $apiReturn.page.total_pages
      $pageNumber = 0
      while ($pageNumber -ne $pages) {
          $apiReturn = http --auth-type=veracode_hmac GET "https://api.veracode.com/appsec/v1/applications/?page=$pageNumber&size=500" | ConvertFrom-Json
          $appProfiles += $apiReturn._embedded.applications
          # Incrementar o contador
          $pageNumber++
      }
      return $appProfiles